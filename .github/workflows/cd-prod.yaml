name: Portal Cloud Production Deployment

on:
  push:
    paths: ["deployments/**", "io2-portal/**"]
    branches:
      - production
  workflow_dispatch:

env:
  namespace: production

jobs:
  production-validate:
    runs-on: ubuntu-20.04
    strategy:
      # Keep running even if one variation of the job fail
      fail-fast: false
      matrix:
        # We run this job multiple times with different parameterization
        # specified below, these parameters have no meaning on their own and
        # gain meaning on how job steps use them.
        #
        # k3s-version: https://github.com/rancher/k3s/tags
        # k3s-channel: https://update.k3s.io/v1-release/channels
        k3s-channel: [v1.18]

    steps:
      - uses: actions/checkout@v2
      - name: Print info
        run: |
          echo "K8 Version: ${{ matrix.k3s-channel }}"
          echo "Namespace: ${{ env.namespace }}"
      - name: Install helm
        run: |
          curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get-helm-3 | bash
      - name: Install git-crypt
        run: sudo apt-get install git-crypt
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: us-west-2
      - name: Copy files to the test website with the AWS CLI
        run: |
          aws s3 cp ${{ secrets.GIT_CRYPT_KEY }} ./crypt.key
      - name: Unlock git-crypt Secrets
        run: git-crypt unlock ./crypt.key && git-crypt status
      - name: Update chart dependencies
        run: |
          helm dependency update ./io2-portal --namespace ${{ env.namespace }}
      - name: Lint chart's templates
        run: |
          helm lint ./io2-portal --strict --values deployments/values-${{ env.namespace }}.yaml
      # Starts a k8s cluster with NetworkPolicy enforcement and installs kubectl
      #
      # ref: https://github.com/manics/action-k3s-helm/
      - uses: manics/action-k3s-helm@v1
        with:
          k3s-channel: ${{ matrix.k3s-channel }}
          metrics-enabled: false
          traefik-enabled: false
          docker-enabled: false
      - name: Create namespace
        run: kubectl create namespace ${{ env.namespace }}
      - name: Apply secrets
        run: kubectl apply -n ${{ env.namespace }} -f deployments/secrets/cava-secrets.yaml
      - name: Install chart and await readiness
        run: |
          helm install io2-portal ./io2-portal --create-namespace --namespace ${{ env.namespace }} --values deployments/values-${{ env.namespace }}.yaml

          . .ci-helpers/common
          full_${{ env.namespace }}_await

      # GitHub Action reference: https://github.com/jupyterhub/action-k8s-namespace-report
      - name: Kubernetes namespace report
        uses: jupyterhub/action-k8s-namespace-report@v1
        if: always()
        with:
          namespace: ${{ env.namespace }}
  deploy:
    name: Deploy my app
    needs: production-validate
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install helm
        run: |
          curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get-helm-3 | bash
      - name: Install git-crypt
        run: sudo apt-get install git-crypt
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: us-west-2
      - name: Copy files to the test website with the AWS CLI
        run: |
          aws s3 cp ${{ secrets.GIT_CRYPT_KEY }} ./crypt.key
      - name: Unlock git-crypt Secrets
        run: git-crypt unlock ./crypt.key && git-crypt status

      # Linting
      - name: Update chart dependencies
        run: |
          helm dependency update ./io2-portal --namespace ${{ env.namespace }}
      - name: Lint chart's templates
        run: |
          helm lint ./io2-portal --strict --values deployments/values-${{ env.namespace }}.yaml

      # Initialize github deployment action
      - name: start deployment
        uses: bobheadxi/deployments@v0.4.3
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.namespace }}

      - name: Set k8s context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
          context: cavakops.k8s.local
        id: setcontext

      - name: Create namespace
        run: |
          NAMESPACE=$(kubectl get namespace ${{ env.namespace }} | grep "${{ env.namespace }}" | wc -l)
          if [ ${NAMESPACE} -eq 0 ];
          then
            echo "Namespace (${{ env.namespace }}) not found. Creating ..."
            kubectl create namespace ${{ env.namespace }}
          else
            echo "Namespace (${{ env.namespace }}) exists. Skipping creation ..."
            kubectl get namespace ${{ env.namespace }}
          fi
      
      - name: Apply secrets
        run: kubectl apply -n ${{ env.namespace }} -f deployments/secrets/cava-secrets.yaml

      - name: Check if chart is installed
        id: chart_check
        run: |
          INSTALLED=$(helm ls --namespace ${{ env.namespace }} | grep "io2-portal" | wc -l)
          echo "::set-output name=INSTALLED::$INSTALLED"

      - name: Install/Upgrade chart and await readiness
        if: success()
        run: |
          if [ ${{ steps.chart_check.outputs.INSTALLED }} -eq 0 ];
          then
            echo "io2-portal not installed. Installing ..."
            helm install io2-portal ./io2-portal --create-namespace --namespace ${{ env.namespace }} --values deployments/values-${{ env.namespace }}.yaml
          else
            echo "io2-portal installed. Upgrading ..."
            helm upgrade --namespace ${{ env.namespace }} -f deployments/values-${{ env.namespace }}.yaml io2-portal ./io2-portal
          fi

          . .ci-helpers/common
          full_${{ env.namespace }}_await


      - name: Kubernetes namespace report
        uses: jupyterhub/action-k8s-namespace-report@v1
        if: always()
        with:
          namespace: ${{ env.namespace }}

      - name: update deployment status
        uses: bobheadxi/deployments@v0.4.3
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}